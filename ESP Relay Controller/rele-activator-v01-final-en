#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>

// WiFi Settings
const char* ssid = "wifi ssd";
const char* password = "wifi pass";

// Use GPIO0 (Pin 5)
const int relayPin = 0;

// Pulse settings
int defaultPulseDurationMs = 5; // Default 5 ms

// Diagnostic counters
unsigned long totalActivations = 0;
unsigned long lastActivationTime = 0;

// Create web server on port 80
ESP8266WebServer server(80);

void setup() {
  Serial.begin(115200);
  
  // Configure GPIO3 as output
  pinMode(relayPin, OUTPUT);
  digitalWrite(relayPin, LOW); // Initial state - open
  
  Serial.println("=== ESP-01 RELAY CONTROLLER ===");
  Serial.println("Default pulse: " + String(defaultPulseDurationMs) + " ms");
  Serial.println("GPIO0 (Pin 5) relay control");
  
  // Connect to WiFi
  WiFi.begin(ssid, password);
  Serial.print("Connecting to '" + String(ssid) + "'");
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println();
  Serial.print("‚úÖ Connected! IP: ");
  Serial.println(WiFi.localIP());
  
  // Configure routes
  server.on("/", handleRoot);
  server.on("/enable", handleWebhook);          // Webhook with default 5ms
  server.on("/activate", handleWebhookCustom);  // Webhook with time parameter
  server.on("/relay", handleRelayControl);      // Main control
  server.on("/status", handleStatus);           // JSON status
  
  // Start server
  server.begin();
  Serial.println("üåê Server started");
  Serial.println("Control: http://" + WiFi.localIP().toString() + "/");
  Serial.println("Webhook: http://" + WiFi.localIP().toString() + "/enable");
}

void loop() {
  server.handleClient();
}

// Main control page
void handleRoot() {
  String html = "<!DOCTYPE html>";
  html += "<html><head>";
  html += "<meta charset='UTF-8'>";
  html += "<meta name='viewport' content='width=device-width, initial-scale=1.0'>";
  html += "<title>Relay Control</title>";
  html += "<style>";
  // Modern design
  html += "* { margin: 0; padding: 0; box-sizing: border-box; }";
  html += "body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; min-height: 100vh; display: flex; align-items: center; justify-content: center; }";
  html += ".container { background: rgba(255,255,255,0.1); backdrop-filter: blur(15px); border-radius: 20px; padding: 40px; max-width: 500px; width: 90%; box-shadow: 0 8px 32px rgba(0,0,0,0.3); border: 1px solid rgba(255,255,255,0.2); }";
  html += ".header { text-align: center; margin-bottom: 40px; }";
  html += ".header h1 { font-size: 2.5em; margin-bottom: 10px; background: linear-gradient(45deg, #fff, #f0f0f0); -webkit-background-clip: text; -webkit-text-fill-color: transparent; background-clip: text; }";
  html += ".header p { opacity: 0.9; font-size: 1.1em; }";
  html += ".connection-status { display: flex; align-items: center; justify-content: center; gap: 12px; margin: 25px 0; padding: 15px; background: rgba(255,255,255,0.1); border-radius: 10px; }";
  html += ".status-dot { width: 12px; height: 12px; border-radius: 50%; background: #4CAF50; box-shadow: 0 0 10px #4CAF50; animation: pulse 2s infinite; }";
  html += ".relay-control { text-align: center; margin: 40px 0; }";
  html += ".relay-button { background: linear-gradient(45deg, #4CAF50, #45a049); color: white; border: none; padding: 20px 50px; font-size: 1.3em; font-weight: bold; border-radius: 50px; cursor: pointer; transition: all 0.3s ease; box-shadow: 0 6px 20px rgba(76, 175, 80, 0.4); position: relative; overflow: hidden; }";
  html += ".relay-button:hover { transform: translateY(-3px); box-shadow: 0 8px 25px rgba(76, 175, 80, 0.6); }";
  html += ".relay-button:active { transform: translateY(-1px); }";
  html += ".relay-button:disabled { background: #666; cursor: not-allowed; transform: none; box-shadow: none; }";
  html += ".relay-button::before { content: ''; position: absolute; top: 50%; left: 50%; width: 0; height: 0; border-radius: 50%; background: rgba(255,255,255,0.3); transition: all 0.3s ease; transform: translate(-50%, -50%); }";
  html += ".relay-button:active::before { width: 300px; height: 300px; }";
  html += ".info-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; margin: 30px 0; }";
  html += ".info-card { background: rgba(255,255,255,0.1); padding: 20px; border-radius: 12px; text-align: center; transition: all 0.3s ease; }";
  html += ".info-card:hover { background: rgba(255,255,255,0.15); transform: translateY(-2px); }";
  html += ".info-value { font-size: 2em; font-weight: bold; color: #ffd700; margin-bottom: 5px; }";
  html += ".info-label { font-size: 0.9em; opacity: 0.8; }";
  html += ".system-info { background: rgba(255,255,255,0.05); padding: 20px; border-radius: 12px; margin-top: 20px; }";
  html += ".system-row { display: flex; justify-content: space-between; padding: 8px 0; border-bottom: 1px solid rgba(255,255,255,0.1); }";
  html += ".system-row:last-child { border-bottom: none; }";
  html += ".webhook-section { background: rgba(0,255,0,0.1); padding: 20px; border-radius: 12px; margin-top: 20px; border: 1px solid rgba(76, 175, 80, 0.3); }";
  html += ".webhook-url { font-family: monospace; background: rgba(0,0,0,0.2); padding: 8px 12px; border-radius: 6px; margin: 5px 0; font-size: 0.9em; word-break: break-all; }";
  html += "@keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.6; } }";
  html += "@keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }";
  html += ".container { animation: fadeIn 0.8s ease-out; }";
  html += "</style>";
  html += "</head><body>";
  
  html += "<div class='container'>";
  
  // Header
  html += "<div class='header'>";
  html += "<h1>‚ö°</h1>";
  html += "<p>ESP-01 Relay Control</p>";
  html += "</div>";
  
  // Connection status
  html += "<div class='connection-status'>";
  html += "<div class='status-dot'></div>";
  html += "<div>";
  html += "<strong>Connected to " + String(ssid) + "</strong><br>";
  html += "<small>IP: " + WiFi.localIP().toString() + " | Signal: " + String(WiFi.RSSI()) + " dBm</small>";
  html += "</div>";
  html += "</div>";
  
  // Relay control
  html += "<div class='relay-control'>";
  html += "<button id='relayBtn' class='relay-button' onclick='activateRelay()'>";
  html += "üîÑ ACTIVATE RELAY";
  html += "</button>";
  html += "<div style='margin-top: 15px; font-size: 0.9em; opacity: 0.8;'>";
  html += "Pulse " + String(defaultPulseDurationMs) + " ms on GPIO0";
  html += "</div>";
  html += "</div>";
  
  // Info cards
  html += "<div class='info-grid'>";
  html += "<div class='info-card'>";
  html += "<div class='info-value'>" + String(totalActivations) + "</div>";
  html += "<div class='info-label'>Activations</div>";
  html += "</div>";
  html += "<div class='info-card'>";
  html += "<div class='info-value'>" + String((millis() - lastActivationTime)/1000) + "s</div>";
  html += "<div class='info-label'>Ago</div>";
  html += "</div>";
  html += "</div>";
  
  // System info
  html += "<div class='system-info'>";
  html += "<h4 style='margin-bottom: 15px; color: #ffd700;'>üìã System</h4>";
  html += "<div class='system-row'><span>Uptime</span><span>" + String(millis()/1000) + " sec</span></div>";
  html += "<div class='system-row'><span>Free memory</span><span>" + String(ESP.getFreeHeap()) + " bytes</span></div>";
  html += "<div class='system-row'><span>GPIO0 state</span><span>" + String(digitalRead(relayPin) ? "HIGH" : "LOW") + "</span></div>";
  html += "<div class='system-row'><span>CPU frequency</span><span>" + String(ESP.getCpuFreqMHz()) + " MHz</span></div>";
  html += "</div>";
  
  // Webhook info
  html += "<div class='webhook-section'>";
  html += "<h4 style='margin-bottom: 15px; color: #4CAF50;'>üåê Webhook Endpoints</h4>";
  String baseUrl = "http://" + WiFi.localIP().toString();
  html += "<div style='font-size: 0.9em;'>";
  html += "<div style='margin-bottom: 10px;'><strong>Quick control (5ms):</strong></div>";
  html += "<div class='webhook-url'>" + baseUrl + "/enable</div>";
  html += "<div style='margin: 15px 0 10px;'><strong>Custom time:</strong></div>";
  html += "<div class='webhook-url'>" + baseUrl + "/activate?ms=10</div>";
  html += "<div style='margin-top: 10px; font-size: 0.8em; opacity: 0.7;'>";
  html += "Parameter ms: from 1 to 1000 milliseconds";
  html += "</div>";
  html += "</div>";
  html += "</div>";
  
  html += "</div>";
  
  // JavaScript
  html += "<script>";
  html += "function activateRelay() {";
  html += "  const btn = document.getElementById('relayBtn');";
  html += "  const originalText = btn.innerHTML;";
  html += "  ";
  html += "  btn.disabled = true;";
  html += "  btn.innerHTML = '‚ö° Activating...';";
  html += "  ";
  html += "  fetch('/relay')";
  html += "    .then(response => response.text())";
  html += "    .then(data => {";
  html += "      btn.innerHTML = '‚úÖ Done!';";
  html += "      setTimeout(() => {";
  html += "        btn.innerHTML = originalText;";
  html += "        btn.disabled = false;";
  html += "        location.reload();";
  html += "      }, 1500);";
  html += "    })";
  html += "    .catch(error => {";
  html += "      console.error('Error:', error);";
  html += "      btn.innerHTML = '‚ùå Error';";
  html += "      setTimeout(() => {";
  html += "        btn.innerHTML = originalText;";
  html += "        btn.disabled = false;";
  html += "      }, 1500);";
  html += "    });";
  html += "}";
  html += "</script>";
  
  html += "</body></html>";
  
  server.send(200, "text/html", html);
}

// Main relay control (now without authorization)
void handleRelayControl() {
  activateRelay(defaultPulseDurationMs, "Web Interface");
  server.send(200, "text/plain", "Relay activated: " + String(defaultPulseDurationMs) + "ms");
}

// Webhook with default time (5ms)
void handleWebhook() {
  activateRelay(defaultPulseDurationMs, "Webhook /enable");
  server.send(200, "text/plain", "Relay pulse: " + String(defaultPulseDurationMs) + "ms");
}

// Webhook with custom time
void handleWebhookCustom() {
  int pulseDuration = defaultPulseDurationMs;
  
  if (server.hasArg("ms")) {
    int customMs = server.arg("ms").toInt();
    if (customMs >= 1 && customMs <= 1000) {
      pulseDuration = customMs;
    }
  }
  
  activateRelay(pulseDuration, "Webhook /activate");
  server.send(200, "text/plain", "Relay activated: " + String(pulseDuration) + "ms");
}

// JSON status
void handleStatus() {
  String json = "{";
  json += "\"gpio3_state\":" + String(digitalRead(relayPin)) + ",";
  json += "\"total_activations\":" + String(totalActivations) + ",";
  json += "\"last_activation_ago\":" + String((millis() - lastActivationTime)/1000) + ",";
  json += "\"default_pulse_ms\":" + String(defaultPulseDurationMs) + ",";
  json += "\"wifi_connected\":" + String(WiFi.status() == WL_CONNECTED ? "true" : "false") + ",";
  json += "\"ip_address\":\"" + WiFi.localIP().toString() + "\",";
  json += "\"rssi\":" + String(WiFi.RSSI()) + ",";
  json += "\"uptime\":" + String(millis()/1000) + ",";
  json += "\"free_heap\":" + String(ESP.getFreeHeap());
  json += "}";
  
  server.send(200, "application/json", json);
}

// Relay activation function with specified duration
void activateRelay(int durationMs, String source) {
  unsigned long startTime = millis();
  
  Serial.println("=== RELAY ACTIVATION ===");
  Serial.println("Source: " + source);
  Serial.println("Duration: " + String(durationMs) + " ms");
  Serial.println("Time: " + String(startTime));
  
  // Activate relay
  digitalWrite(relayPin, HIGH);
  delay(durationMs);
  digitalWrite(relayPin, LOW);
  
  unsigned long totalTime = millis() - startTime;
  
  Serial.println("GPIO0: HIGH (" + String(durationMs) + "ms) -> LOW");
  Serial.println("Completed in: " + String(totalTime) + " ms");
  Serial.println("==================");
  
  // Update statistics
  totalActivations++;
  lastActivationTime = millis();
}

